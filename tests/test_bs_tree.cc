#include <sal/bs_tree.hh>
#include <cassert>

int main() {
  using data_type = int;
  using Tree = sal::BSTree<data_type>;

  {
    auto tree = Tree();
    assert(tree.root() == nullptr);
    tree.insert(0);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->left() == nullptr);
    assert(tree.root()->right() == nullptr);
    tree.insert(1);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->left() == nullptr);
    assert(tree.root()->right());
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->left() == nullptr);
    assert(tree.root()->right()->right() == nullptr);
    tree.insert(-1);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->left());
    assert(tree.root()->left()->value() == -1);
    assert(tree.root()->left()->left() == nullptr);
    assert(tree.root()->left()->right() == nullptr);
    assert(tree.root()->right());
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->left() == nullptr);
    assert(tree.root()->right()->right() == nullptr);
    assert(tree.find(0) != nullptr);
    assert(tree.find(1) != nullptr);
    assert(tree.find(-1) != nullptr);
    assert(tree.find(2) == nullptr);
    assert(tree.find(-2) == nullptr);
    tree.remove(0);
    assert(tree.find(0) == nullptr);
    assert(tree.find(1) != nullptr);
    assert(tree.find(-1) != nullptr);
    tree.remove(1);
    assert(tree.find(0) == nullptr);
    assert(tree.find(1) == nullptr);
    assert(tree.find(-1) != nullptr);
    tree.remove(-1);
    assert(tree.find(0) == nullptr);
    assert(tree.find(1) == nullptr);
    assert(tree.find(-1) == nullptr);
  }
  {
    auto tree = Tree();
    assert(tree.root() == nullptr);
    tree.insert(0);
    assert(tree.root() != nullptr);
    assert(tree.root()->value() == 0);
    assert(tree.root()->left() == nullptr);
    assert(tree.root()->right() == nullptr);
    tree.insert(1);
    assert(tree.root() != nullptr);
    assert(tree.root()->value() == 0);
    assert(tree.root()->left() == nullptr);
    assert(tree.root()->right() != nullptr);
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->left() == nullptr);
    assert(tree.root()->right()->right() == nullptr);
    tree.insert(-1);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->left() != nullptr);
    assert(tree.root()->left()->value() == -1);
    assert(tree.root()->left()->left() == nullptr);
    assert(tree.root()->left()->right() == nullptr);
    assert(tree.root()->right() != nullptr);
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->left() == nullptr);
    assert(tree.root()->right()->right() == nullptr);
    tree.insert(2);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->left() != nullptr);
    assert(tree.root()->left()->value() == -1);
    assert(tree.root()->left()->left() == nullptr);
    assert(tree.root()->left()->right() == nullptr);
    assert(tree.root()->right() != nullptr);
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->left() == nullptr);
    assert(tree.root()->right()->right() != nullptr);
    assert(tree.root()->right()->right()->value() == 2);
    assert(tree.root()->right()->right()->left() == nullptr);
    assert(tree.root()->right()->right()->right() == nullptr);
    tree.insert(-2);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->left() != nullptr);
    assert(tree.root()->left()->value() == -1);
    assert(tree.root()->left()->left() != nullptr);
    assert(tree.root()->left()->left()->value() == -2);
    assert(tree.root()->left()->left()->left() == nullptr);
    assert(tree.root()->left()->left()->right() == nullptr);
    assert(tree.root()->left()->right() == nullptr);
    assert(tree.root()->right() != nullptr);
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->left() == nullptr);
    assert(tree.root()->right()->right() != nullptr);
    assert(tree.root()->right()->right()->value() == 2);
    assert(tree.root()->right()->right()->left() == nullptr);
    assert(tree.root()->right()->right()->right() == nullptr);
    tree.insert(3);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->left() != nullptr);
    assert(tree.root()->left()->value() == -1);
    assert(tree.root()->left()->left() != nullptr);
    assert(tree.root()->left()->left()->value() == -2);
    assert(tree.root()->left()->left()->left() == nullptr);
    assert(tree.root()->left()->left()->right() == nullptr);
    assert(tree.root()->left()->right() == nullptr);
    assert(tree.root()->right() != nullptr);
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->left() == nullptr);
    assert(tree.root()->right()->right() != nullptr);
    assert(tree.root()->right()->right()->value() == 2);
    assert(tree.root()->right()->right()->left() == nullptr);
    assert(tree.root()->right()->right()->right() != nullptr);
    assert(tree.root()->right()->right()->right()->value() == 3);
    assert(tree.root()->right()->right()->right()->left() == nullptr);
    assert(tree.root()->right()->right()->right()->right() == nullptr);
    tree.insert(-3);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->left() != nullptr);
    assert(tree.root()->left()->value() == -1);
    assert(tree.root()->left()->left() != nullptr);
    assert(tree.root()->left()->left()->value() == -2);
    assert(tree.root()->left()->left()->left() != nullptr);
    assert(tree.root()->left()->left()->left()->value() == -3);
    assert(tree.root()->left()->left()->left()->left() == nullptr);
    assert(tree.root()->left()->left()->left()->right() == nullptr);
    assert(tree.root()->left()->left()->right() == nullptr);
    assert(tree.root()->left()->right() == nullptr);
    assert(tree.root()->right() != nullptr);
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->left() == nullptr);
    assert(tree.root()->right()->right() != nullptr);
    assert(tree.root()->right()->right()->value() == 2);
    assert(tree.root()->right()->right()->left() == nullptr);
    assert(tree.root()->right()->right()->right() != nullptr);
    assert(tree.root()->right()->right()->right()->value() == 3);
    assert(tree.root()->right()->right()->right()->left() == nullptr);
    assert(tree.root()->right()->right()->right()->right() == nullptr);

    tree.remove(0);
    assert(tree.root());
    assert(tree.root()->value() == -1);
    assert(tree.root()->left() != nullptr);
    assert(tree.root()->left()->value() == -2);
    assert(tree.root()->left()->left() != nullptr);
    assert(tree.root()->left()->left()->value() == -3);
    assert(tree.root()->left()->left()->left() == nullptr);
    assert(tree.root()->left()->left()->right() == nullptr);
    assert(tree.root()->left()->right() == nullptr);
    assert(tree.root()->right() != nullptr);
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->left() == nullptr);
    assert(tree.root()->right()->right() != nullptr);
    assert(tree.root()->right()->right()->value() == 2);
    assert(tree.root()->right()->right()->left() == nullptr);
    assert(tree.root()->right()->right()->right() != nullptr);
    assert(tree.root()->right()->right()->right()->value() == 3);
    assert(tree.root()->right()->right()->right()->left() == nullptr);
    assert(tree.root()->right()->right()->right()->right() == nullptr);

    assert(!tree.find(0));
    assert(tree.find(1));
    assert(tree.find(-1));
    assert(tree.find(2));
    assert(tree.find(-2));
    assert(tree.find(3));
    assert(tree.find(-3));
    assert(!tree.find(4));
    assert(!tree.find(-4));
  }

  return 0;
}
