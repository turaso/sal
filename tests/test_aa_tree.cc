#include <sal/aa_tree.hh>
#include <sal/tree.hh>
#include <cassert>

int main() {
  using data_type = int;
  using Tree = sal::AATree<data_type>;

  {
    auto tree = Tree();
    assert(tree.root() == nullptr);
    tree.insert(0);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->level() == 0);
    tree.insert(1);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->level() == 0);
    assert(tree.root()->right());
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->level() == 0);
    tree.insert(-1);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->level() == 1);
    assert(tree.root()->right());
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->level() == 0);
    assert(tree.root()->left());
    assert(tree.root()->left()->value() == -1);
    assert(tree.root()->left()->level() == 0);
    tree.insert(2);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->level() == 1);
    assert(tree.root()->right());
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->level() == 0);
    assert(tree.root()->left());
    assert(tree.root()->left()->value() == -1);
    assert(tree.root()->left()->level() == 0);
    assert(tree.root()->right()->right());
    assert(tree.root()->right()->right()->value() == 2);
    assert(tree.root()->right()->right()->level() == 0);
    tree.insert(-2);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->level() == 1);
    assert(tree.root()->right());
    assert(tree.root()->right()->value() == 1);
    assert(tree.root()->right()->level() == 0);
    assert(tree.root()->left());
    assert(tree.root()->left()->value() == -2);
    assert(tree.root()->left()->level() == 0);
    assert(tree.root()->right()->right());
    assert(tree.root()->right()->right()->value() == 2);
    assert(tree.root()->right()->right()->level() == 0);
    assert(tree.root()->left()->right());
    assert(tree.root()->left()->right()->value() == -1);
    assert(tree.root()->left()->right()->level() == 0);
    tree.insert(3);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->level() == 1);
    assert(tree.root()->right());
    assert(tree.root()->right()->value() == 2);
    assert(tree.root()->right()->level() == 1);
    assert(tree.root()->left());
    assert(tree.root()->left()->value() == -2);
    assert(tree.root()->left()->level() == 0);
    assert(tree.root()->right()->right());
    assert(tree.root()->right()->right()->value() == 3);
    assert(tree.root()->right()->right()->level() == 0);
    assert(tree.root()->right()->left());
    assert(tree.root()->right()->left()->value() == 1);
    assert(tree.root()->right()->left()->level() == 0);
    assert(tree.root()->left()->right());
    assert(tree.root()->left()->right()->value() == -1);
    assert(tree.root()->left()->right()->level() == 0);
    tree.insert(-3);
    assert(tree.root());
    assert(tree.root()->value() == 0);
    assert(tree.root()->level() == 2);
    assert(tree.root()->right());
    assert(tree.root()->right()->value() == 2);
    assert(tree.root()->right()->level() == 1);
    assert(tree.root()->left());
    assert(tree.root()->left()->value() == -2);
    assert(tree.root()->left()->level() == 1);
    assert(tree.root()->right()->right());
    assert(tree.root()->right()->right()->value() == 3);
    assert(tree.root()->right()->right()->level() == 0);
    assert(tree.root()->right()->left());
    assert(tree.root()->right()->left()->value() == 1);
    assert(tree.root()->right()->left()->level() == 0);
    assert(tree.root()->left()->right());
    assert(tree.root()->left()->right()->value() == -1);
    assert(tree.root()->left()->right()->level() == 0);
    assert(tree.root()->left()->left());
    assert(tree.root()->left()->left()->value() == -3);
    assert(tree.root()->left()->left()->level() == 0);

    tree.remove(0);
    assert(tree.root());
    assert(tree.root()->value() == -1);
    assert(tree.root()->level() == 2);
    assert(tree.root()->right());
    assert(tree.root()->right()->value() == 2);
    assert(tree.root()->right()->level() == 1);
    assert(tree.root()->left());
    assert(tree.root()->left()->value() == -2);
    assert(tree.root()->left()->level() == 1);
    assert(tree.root()->right()->right());
    assert(tree.root()->right()->right()->value() == 3);
    assert(tree.root()->right()->right()->level() == 0);
    assert(tree.root()->right()->left());
    assert(tree.root()->right()->left()->value() == 1);
    assert(tree.root()->right()->left()->level() == 0);
    assert(!tree.root()->left()->right());
    assert(tree.root()->left()->left());
    assert(tree.root()->left()->left()->value() == -3);
    assert(tree.root()->left()->left()->level() == 0);

    assert(!tree.find(0));
    assert(tree.find(1));
    assert(tree.find(-1));
    assert(tree.find(2));
    assert(tree.find(-2));
    assert(tree.find(3));
    assert(tree.find(-3));
    assert(!tree.find(4));
    assert(!tree.find(-4));
  }

  {
    constexpr Tree src;
    constexpr Tree dst(src);
    assert(!src.root());
    assert(!dst.root());
  }
  {
    Tree src;
    src.insert(0);
    const Tree dst(src);
    assert(src.root());
    assert(src.root()->value() == 0);
    assert(dst.root());
    assert(dst.root()->value() == 0);
  }
  {
    Tree src;
    src.insert(0);
    Tree dst(src);
    dst.remove(0);
    assert(src.root());
    assert(src.root()->value() == 0);
    assert(!dst.root());
  }
  {
    Tree src;
    src.insert(0);
    src.insert(1);
    const Tree dst(src);
    assert(src.root());
    assert(src.root()->value() == 0);
    assert(src.root()->right());
    assert(src.root()->right()->value() == 1);
    assert(dst.root());
    assert(dst.root()->value() == 0);
    assert(dst.root()->right());
    assert(dst.root()->right()->value() == 1);
  }
  {
    Tree src;
    src.insert(0);
    src.insert(1);
    Tree dst(src);
    dst.remove(0);
    dst.remove(1);
    dst.insert(-1);
    assert(src.root());
    assert(src.root()->value() == 0);
    assert(src.root()->right());
    assert(src.root()->right()->value() == 1);
    assert(dst.root());
    assert(dst.root()->value() == -1);
    assert(!dst.root()->right());
    assert(!dst.root()->left());
  }
  {
    Tree src;
    src.insert(0);
    src.insert(1);
    src.insert(-1);
    src.insert(2);
    src.insert(-2);
    src.insert(3);
    src.insert(-3);
    Tree dst(src);
    assert(src.root());
    assert(src.root()->value() == 0);
    assert(src.root()->level() == 2);
    assert(src.root()->right());
    assert(src.root()->right()->value() == 2);
    assert(src.root()->right()->level() == 1);
    assert(src.root()->left());
    assert(src.root()->left()->value() == -2);
    assert(src.root()->left()->level() == 1);
    assert(src.root()->right()->right());
    assert(src.root()->right()->right()->value() == 3);
    assert(src.root()->right()->right()->level() == 0);
    assert(src.root()->right()->left());
    assert(src.root()->right()->left()->value() == 1);
    assert(src.root()->right()->left()->level() == 0);
    assert(src.root()->left()->right());
    assert(src.root()->left()->right()->value() == -1);
    assert(src.root()->left()->right()->level() == 0);
    assert(src.root()->left()->left());
    assert(src.root()->left()->left()->value() == -3);
    assert(src.root()->left()->left()->level() == 0);
    assert(dst.root());
    assert(dst.root()->value() == 0);
    assert(dst.root()->level() == 2);
    assert(dst.root()->right());
    assert(dst.root()->right()->value() == 2);
    assert(dst.root()->right()->level() == 1);
    assert(dst.root()->left());
    assert(dst.root()->left()->value() == -2);
    assert(dst.root()->left()->level() == 1);
    assert(dst.root()->right()->right());
    assert(dst.root()->right()->right()->value() == 3);
    assert(dst.root()->right()->right()->level() == 0);
    assert(dst.root()->right()->left());
    assert(dst.root()->right()->left()->value() == 1);
    assert(dst.root()->right()->left()->level() == 0);
    assert(dst.root()->left()->right());
    assert(dst.root()->left()->right()->value() == -1);
    assert(dst.root()->left()->right()->level() == 0);
    assert(dst.root()->left()->left());
    assert(dst.root()->left()->left()->value() == -3);
    assert(dst.root()->left()->left()->level() == 0);
    src.remove(0);
    assert(src.root());
    assert(src.root()->value() == -1);
    assert(src.root()->level() == 2);
    assert(src.root()->right());
    assert(src.root()->right()->value() == 2);
    assert(src.root()->right()->level() == 1);
    assert(src.root()->left());
    assert(src.root()->left()->value() == -2);
    assert(src.root()->left()->level() == 1);
    assert(src.root()->right()->right());
    assert(src.root()->right()->right()->value() == 3);
    assert(src.root()->right()->right()->level() == 0);
    assert(src.root()->right()->left());
    assert(src.root()->right()->left()->value() == 1);
    assert(src.root()->right()->left()->level() == 0);
    assert(!src.root()->left()->right());
    assert(src.root()->left()->left());
    assert(src.root()->left()->left()->value() == -3);
    assert(src.root()->left()->left()->level() == 0);
    assert(dst.root());
    assert(dst.root()->value() == 0);
    assert(dst.root()->level() == 2);
    assert(dst.root()->right());
    assert(dst.root()->right()->value() == 2);
    assert(dst.root()->right()->level() == 1);
    assert(dst.root()->left());
    assert(dst.root()->left()->value() == -2);
    assert(dst.root()->left()->level() == 1);
    assert(dst.root()->right()->right());
    assert(dst.root()->right()->right()->value() == 3);
    assert(dst.root()->right()->right()->level() == 0);
    assert(dst.root()->right()->left());
    assert(dst.root()->right()->left()->value() == 1);
    assert(dst.root()->right()->left()->level() == 0);
    assert(dst.root()->left()->right());
    assert(dst.root()->left()->right()->value() == -1);
    assert(dst.root()->left()->right()->level() == 0);
    assert(dst.root()->left()->left());
    assert(dst.root()->left()->left()->value() == -3);
    assert(dst.root()->left()->left()->level() == 0);
    dst.remove(0);
    assert(src.root());
    assert(src.root()->value() == -1);
    assert(src.root()->level() == 2);
    assert(src.root()->right());
    assert(src.root()->right()->value() == 2);
    assert(src.root()->right()->level() == 1);
    assert(src.root()->left());
    assert(src.root()->left()->value() == -2);
    assert(src.root()->left()->level() == 1);
    assert(src.root()->right()->right());
    assert(src.root()->right()->right()->value() == 3);
    assert(src.root()->right()->right()->level() == 0);
    assert(src.root()->right()->left());
    assert(src.root()->right()->left()->value() == 1);
    assert(src.root()->right()->left()->level() == 0);
    assert(!src.root()->left()->right());
    assert(src.root()->left()->left());
    assert(src.root()->left()->left()->value() == -3);
    assert(src.root()->left()->left()->level() == 0);
    assert(src.root());
    assert(dst.root()->value() == -1);
    assert(dst.root()->level() == 2);
    assert(dst.root()->right());
    assert(dst.root()->right()->value() == 2);
    assert(dst.root()->right()->level() == 1);
    assert(dst.root()->left());
    assert(dst.root()->left()->value() == -2);
    assert(dst.root()->left()->level() == 1);
    assert(dst.root()->right()->right());
    assert(dst.root()->right()->right()->value() == 3);
    assert(dst.root()->right()->right()->level() == 0);
    assert(dst.root()->right()->left());
    assert(dst.root()->right()->left()->value() == 1);
    assert(dst.root()->right()->left()->level() == 0);
    assert(!dst.root()->left()->right());
    assert(dst.root()->left()->left());
    assert(dst.root()->left()->left()->value() == -3);
    assert(dst.root()->left()->left()->level() == 0);
  }

  {
    constexpr Tree src;
    constexpr Tree dst(std::move(src));
    assert(!dst.root());
  }
  {
    Tree src;
    src.insert(0);
    const Tree dst(std::move(src));
    assert(dst.root());
    assert(dst.root()->value() == 0);
  }
  {
    Tree src;
    src.insert(0);
    Tree dst(src);
    dst.remove(0);
    assert(src.root());
    assert(src.root()->value() == 0);
    assert(!dst.root());
  }
  {
    Tree src;
    src.insert(0);
    src.insert(1);
    const Tree dst(std::move(src));
    assert(dst.root());
    assert(dst.root()->value() == 0);
    assert(dst.root()->right());
    assert(dst.root()->right()->value() == 1);
  }

  {
    constexpr Tree src;
    constexpr Tree dst = src;
    assert(!src.root());
    assert(!dst.root());
  }
  {
    Tree src;
    src.insert(0);
    const Tree dst = src;
    assert(src.root());
    assert(src.root()->value() == 0);
    assert(dst.root());
    assert(dst.root()->value() == 0);
  }
  {
    Tree src;
    src.insert(0);
    Tree dst = src;
    dst.remove(0);
    assert(src.root());
    assert(src.root()->value() == 0);
    assert(!dst.root());
  }
  {
    Tree src;
    src.insert(0);
    src.insert(1);
    const Tree dst = src;
    assert(src.root());
    assert(src.root()->value() == 0);
    assert(src.root()->right());
    assert(src.root()->right()->value() == 1);
    assert(dst.root());
    assert(dst.root()->value() == 0);
    assert(dst.root()->right());
    assert(dst.root()->right()->value() == 1);
  }
  {
    Tree src;
    src.insert(0);
    src.insert(1);
    Tree dst = src;
    dst.remove(0);
    dst.remove(1);
    dst.insert(-1);
    assert(src.root());
    assert(src.root()->value() == 0);
    assert(src.root()->right());
    assert(src.root()->right()->value() == 1);
    assert(dst.root());
    assert(dst.root()->value() == -1);
    assert(!dst.root()->right());
    assert(!dst.root()->left());
  }
  {
    Tree src;
    src.insert(0);
    src.insert(1);
    src.insert(-1);
    src.insert(2);
    src.insert(-2);
    src.insert(3);
    src.insert(-3);
    Tree dst = src;
    assert(src.root());
    assert(src.root()->value() == 0);
    assert(src.root()->level() == 2);
    assert(src.root()->right());
    assert(src.root()->right()->value() == 2);
    assert(src.root()->right()->level() == 1);
    assert(src.root()->left());
    assert(src.root()->left()->value() == -2);
    assert(src.root()->left()->level() == 1);
    assert(src.root()->right()->right());
    assert(src.root()->right()->right()->value() == 3);
    assert(src.root()->right()->right()->level() == 0);
    assert(src.root()->right()->left());
    assert(src.root()->right()->left()->value() == 1);
    assert(src.root()->right()->left()->level() == 0);
    assert(src.root()->left()->right());
    assert(src.root()->left()->right()->value() == -1);
    assert(src.root()->left()->right()->level() == 0);
    assert(src.root()->left()->left());
    assert(src.root()->left()->left()->value() == -3);
    assert(src.root()->left()->left()->level() == 0);
    assert(dst.root());
    assert(dst.root()->value() == 0);
    assert(dst.root()->level() == 2);
    assert(dst.root()->right());
    assert(dst.root()->right()->value() == 2);
    assert(dst.root()->right()->level() == 1);
    assert(dst.root()->left());
    assert(dst.root()->left()->value() == -2);
    assert(dst.root()->left()->level() == 1);
    assert(dst.root()->right()->right());
    assert(dst.root()->right()->right()->value() == 3);
    assert(dst.root()->right()->right()->level() == 0);
    assert(dst.root()->right()->left());
    assert(dst.root()->right()->left()->value() == 1);
    assert(dst.root()->right()->left()->level() == 0);
    assert(dst.root()->left()->right());
    assert(dst.root()->left()->right()->value() == -1);
    assert(dst.root()->left()->right()->level() == 0);
    assert(dst.root()->left()->left());
    assert(dst.root()->left()->left()->value() == -3);
    assert(dst.root()->left()->left()->level() == 0);
    src.remove(0);
    assert(src.root());
    assert(src.root()->value() == -1);
    assert(src.root()->level() == 2);
    assert(src.root()->right());
    assert(src.root()->right()->value() == 2);
    assert(src.root()->right()->level() == 1);
    assert(src.root()->left());
    assert(src.root()->left()->value() == -2);
    assert(src.root()->left()->level() == 1);
    assert(src.root()->right()->right());
    assert(src.root()->right()->right()->value() == 3);
    assert(src.root()->right()->right()->level() == 0);
    assert(src.root()->right()->left());
    assert(src.root()->right()->left()->value() == 1);
    assert(src.root()->right()->left()->level() == 0);
    assert(!src.root()->left()->right());
    assert(src.root()->left()->left());
    assert(src.root()->left()->left()->value() == -3);
    assert(src.root()->left()->left()->level() == 0);
    assert(dst.root());
    assert(dst.root()->value() == 0);
    assert(dst.root()->level() == 2);
    assert(dst.root()->right());
    assert(dst.root()->right()->value() == 2);
    assert(dst.root()->right()->level() == 1);
    assert(dst.root()->left());
    assert(dst.root()->left()->value() == -2);
    assert(dst.root()->left()->level() == 1);
    assert(dst.root()->right()->right());
    assert(dst.root()->right()->right()->value() == 3);
    assert(dst.root()->right()->right()->level() == 0);
    assert(dst.root()->right()->left());
    assert(dst.root()->right()->left()->value() == 1);
    assert(dst.root()->right()->left()->level() == 0);
    assert(dst.root()->left()->right());
    assert(dst.root()->left()->right()->value() == -1);
    assert(dst.root()->left()->right()->level() == 0);
    assert(dst.root()->left()->left());
    assert(dst.root()->left()->left()->value() == -3);
    assert(dst.root()->left()->left()->level() == 0);
    dst.remove(0);
    assert(src.root());
    assert(src.root()->value() == -1);
    assert(src.root()->level() == 2);
    assert(src.root()->right());
    assert(src.root()->right()->value() == 2);
    assert(src.root()->right()->level() == 1);
    assert(src.root()->left());
    assert(src.root()->left()->value() == -2);
    assert(src.root()->left()->level() == 1);
    assert(src.root()->right()->right());
    assert(src.root()->right()->right()->value() == 3);
    assert(src.root()->right()->right()->level() == 0);
    assert(src.root()->right()->left());
    assert(src.root()->right()->left()->value() == 1);
    assert(src.root()->right()->left()->level() == 0);
    assert(!src.root()->left()->right());
    assert(src.root()->left()->left());
    assert(src.root()->left()->left()->value() == -3);
    assert(src.root()->left()->left()->level() == 0);
    assert(src.root());
    assert(dst.root()->value() == -1);
    assert(dst.root()->level() == 2);
    assert(dst.root()->right());
    assert(dst.root()->right()->value() == 2);
    assert(dst.root()->right()->level() == 1);
    assert(dst.root()->left());
    assert(dst.root()->left()->value() == -2);
    assert(dst.root()->left()->level() == 1);
    assert(dst.root()->right()->right());
    assert(dst.root()->right()->right()->value() == 3);
    assert(dst.root()->right()->right()->level() == 0);
    assert(dst.root()->right()->left());
    assert(dst.root()->right()->left()->value() == 1);
    assert(dst.root()->right()->left()->level() == 0);
    assert(!dst.root()->left()->right());
    assert(dst.root()->left()->left());
    assert(dst.root()->left()->left()->value() == -3);
    assert(dst.root()->left()->left()->level() == 0);
  }

  {
    constexpr Tree src;
    constexpr Tree dst = std::move(src);
    assert(!dst.root());
  }
  {
    Tree src;
    src.insert(0);
    const Tree dst = std::move(src);
    assert(dst.root());
    assert(dst.root()->value() == 0);
  }
  {
    Tree src;
    src.insert(0);
    src.insert(1);
    const Tree dst = std::move(src);
    assert(dst.root());
    assert(dst.root()->value() == 0);
    assert(dst.root()->right());
    assert(dst.root()->right()->value() == 1);
  }

  return 0;
}
